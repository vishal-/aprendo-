model Course {
  id        Int      @id @default(autoincrement())
  name      String   // e.g. "Grade 1", "Grade 5"
  isBase    Boolean
  ownerId   String
  owner     UserInfo @relation("CourseOwner", fields: [ownerId], references: [uid])
  curriculumRelations CurriculumRelation[]
}

model Subject {
  id        Int      @id @default(autoincrement())
  name      String   // e.g. "Mathematics", "Science"
  isBase    Boolean
  ownerId   String
  owner     UserInfo @relation("SubjectOwner", fields: [ownerId], references: [uid])
  curriculumRelations CurriculumRelation[]
}

model Topic {
  id        Int      @id @default(autoincrement())
  name      String   // e.g. "Operations", "Geometry"
  isBase    Boolean
  ownerId   String
  owner     UserInfo @relation("TopicOwner", fields: [ownerId], references: [uid])
  curriculumRelations CurriculumRelation[]
}

model Subtopic {
  id        Int      @id @default(autoincrement())
  name      String   // e.g. "Addition", "Subtraction"
  isBase    Boolean
  ownerId   String
  owner     UserInfo @relation("SubtopicOwner", fields: [ownerId], references: [uid])
  curriculumRelations CurriculumRelation[]
}

/// Relations that define the curriculum hierarchy
model CurriculumRelation {
  id          Int        @id @default(autoincrement())
  courseId    Int?
  subjectId   Int?
  topicId     Int?
  subtopicId  Int?
  ownerId     String?

  course      Course?    @relation(fields: [courseId], references: [id])
  subject     Subject?   @relation(fields: [subjectId], references: [id])
  topic       Topic?     @relation(fields: [topicId], references: [id])
  subtopic    Subtopic?  @relation(fields: [subtopicId], references: [id])
  owner       UserInfo?  @relation(fields: [ownerId], references: [uid])

  order       Int?
}

model UserInfo {
  uid              String   @id @default(cuid())
  email            String   @unique
  profilePicture   String
  phone            String
  phoneVerified    Boolean
  termsAccepted    Boolean
  termsAcceptedAt  DateTime
  createdAt        DateTime @default(now())
  displayName      String
  role             UserRole

  courses          Course[]        @relation("CourseOwner")
  subjects         Subject[]       @relation("SubjectOwner")
  topics           Topic[]         @relation("TopicOwner")
  subtopics        Subtopic[]      @relation("SubtopicOwner")
  curriculumRelations CurriculumRelation[]
}

enum UserRole {
  admin
  parent
  tutor
  student
  moderator
  academy
}
