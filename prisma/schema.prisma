// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id        Int      @id @default(autoincrement())
  name      String   @unique // Unique constraint added for Course name
  isBase    Boolean
  ownerId   String
  owner     UserInfo @relation("CourseOwner", fields: [ownerId], references: [uid])
  subjects  Subject[]
  problems  Problem[]
}

model Subject {
  id        Int      @id @default(autoincrement())
  name      String
  isBase    Boolean
  ownerId   String
  courseId  Int
  owner     UserInfo @relation("SubjectOwner", fields: [ownerId], references: [uid])
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  topics    Topic[]
  problems  Problem[]
  @@unique([name, courseId]) // Ensures unique Subject names within a Course
}

model Topic {
  id        Int      @id @default(autoincrement())
  name      String
  isBase    Boolean
  ownerId   String
  subjectId Int
  owner     UserInfo @relation("TopicOwner", fields: [ownerId], references: [uid])
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subtopics Subtopic[]
  problems  Problem[]
  @@unique([name, subjectId]) // Ensures unique Topic names within a Subject
}

model Subtopic {
  id        Int      @id @default(autoincrement())
  name      String
  isBase    Boolean
  ownerId   String
  topicId   Int
  owner     UserInfo @relation("SubtopicOwner", fields: [ownerId], references: [uid])
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  problems  Problem[]
  @@unique([name, topicId]) // Ensures unique Subtopic names within a Topic
}

model ProblemType {
  code        String    @id
  title       String
  description String?
  offlineOnly Boolean
  problems    Problem[]
}

model Problem {
  id               Int              @id @default(autoincrement())
  typeCode         String
  statement        String
  answer           String
  explanation      String
  difficulty       Difficulty?
  courseId         Int?
  subjectId        Int?
  topicId          Int?
  subtopicId       Int?
  suggestedPoints  Int?
  suggestedTime    Int?
  media            Json
  metadata         Json?
  ownerId          String
  isPublic         Boolean
  isActive         Boolean
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  problemType      ProblemType      @relation(fields: [typeCode], references: [code])
  owner            UserInfo         @relation("ProblemOwner", fields: [ownerId], references: [uid])
  course           Course?          @relation(fields: [courseId], references: [id])
  subject          Subject?         @relation(fields: [subjectId], references: [id])
  topic            Topic?           @relation(fields: [topicId], references: [id])
  subtopic         Subtopic?        @relation(fields: [subtopicId], references: [id])
  options          ProblemOptions[]
}

model ProblemOptions {
  id        Int      @id @default(autoincrement())
  problemId Int
  content   String
  isCorrect Boolean
  media     Json?
  metadata  Json?
  updatedAt DateTime @updatedAt
  
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

enum Difficulty {
  easy
  medium
  hard
}

model UserInfo {
  uid              String   @id @default(cuid())
  email            String   @unique
  profilePicture   String
  phone            String
  phoneVerified    Boolean
  termsAccepted    Boolean
  termsAcceptedAt  DateTime
  createdAt        DateTime @default(now())
  displayName      String
  role             UserRole

  courses          Course[]        @relation("CourseOwner")
  subjects         Subject[]       @relation("SubjectOwner")
  topics           Topic[]         @relation("TopicOwner")
  subtopics        Subtopic[]      @relation("SubtopicOwner")
  problems         Problem[]       @relation("ProblemOwner")
}

enum UserRole {
  admin
  parent
  tutor
  student
  moderator
  academy
}
