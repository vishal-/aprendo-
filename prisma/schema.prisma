// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role        Role      @default(STUDENT)
  accounts      Account[]
  sessions      Session[]
  tests       Test[]    @relation("TeacherTests")
  assignments Assignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Test {
  id          String    @id @default(cuid())
  title       String
  subject     String
  grade       Int
  author      User      @relation("TeacherTests", fields: [authorId], references: [id])
  authorId    String
  questions   Question[]
  assignments Assignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id        String   @id @default(cuid())
  text      String
  type      QuestionType
  options   Json?    // For multiple-choice questions
  test      Test     @relation(fields: [testId], references: [id])
  testId    String
  answers   Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assignment {
  id        String   @id @default(cuid())
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  test      Test     @relation(fields: [testId], references: [id])
  testId    String
  status    AssignmentStatus @default(UPCOMING)
  score     Float?
  answers   Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id           String     @id @default(cuid())
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
  question     Question   @relation(fields: [questionId], references: [id])
  questionId   String
  value        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  STUDENT
  TEACHER
}

enum QuestionType {
  MULTIPLE_CHOICE
  SUBJECTIVE
}

enum AssignmentStatus {
  UPCOMING
  IN_PROGRESS
  COMPLETED
}